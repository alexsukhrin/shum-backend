name: CI

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  pull_request:
    branches: ['master', 'main']
    paths-ignore: ['docs/**']

  push:
    branches: ['master', 'main']
    paths-ignore: ['docs/**']

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: '.python-version'
      # Consider using pre-commit.ci for open source project
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  # With no caching at all the entire ci process takes 3m to complete!
  pytest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and cache local backend
        uses: docker/bake-action@v6
        with:
          push: false
          load: true
          files: docker-compose.local.yml
          targets: django
          set: |
            django.cache-from=type=gha,scope=django-cached-tests
            django.cache-to=type=gha,scope=django-cached-tests,mode=max
            postgres.cache-from=type=gha,scope=postgres-cached-tests
            postgres.cache-to=type=gha,scope=postgres-cached-tests,mode=max

      - name: Build and cache docs
        uses: docker/bake-action@v6
        with:
          push: false
          load: true
          files: docker-compose.docs.yml
          set: |
            docs.cache-from=type=gha,scope=cached-docs
            docs.cache-to=type=gha,scope=cached-docs,mode=max

      - name: Check DB Migrations
        run: docker compose -f docker-compose.local.yml run --rm django python manage.py makemigrations --check

      - name: Run DB Migrations
        run: docker compose -f docker-compose.local.yml run --rm django python manage.py migrate

      - name: Run Django Tests
        run: docker compose -f docker-compose.local.yml run django pytest

      - name: Tear down the Stack
        run: docker compose -f docker-compose.local.yml down

  deploy-prod:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [linter, pytest]
    environment: production
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          IMAGE_REPO_LOWER=$(echo "ghcr.io/${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_TAG="${{ github.sha }}"
          docker build --no-cache -f ./compose/production/django/Dockerfile -t "${IMAGE_REPO_LOWER}:${IMAGE_TAG}" .
          docker push "${IMAGE_REPO_LOWER}:${IMAGE_TAG}"

          # Also tag as latest
          docker tag "${IMAGE_REPO_LOWER}:${IMAGE_TAG}" "${IMAGE_REPO_LOWER}:latest"
          docker push "${IMAGE_REPO_LOWER}:latest"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ vars.PRODUCTION_HOST }}
          username: ${{ vars.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Set image variables
            IMAGE_REPO_LOWER=$(echo "ghcr.io/${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            IMAGE_TAG="${{ github.sha }}"
            IMAGE_NAME="${IMAGE_REPO_LOWER}:${IMAGE_TAG}"

            echo "--- Pulling new image: $IMAGE_NAME ---"
            docker pull $IMAGE_NAME

            echo "--- Stopping old containers ---"
            docker-compose -f docker-compose.production.yml down || true

            echo "--- Creating network if not exists ---"
            docker network create shum-production-net || true

            echo "--- Running database migrations (AWS RDS) ---"
            docker run --rm \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e DJANGO_SETTINGS_MODULE=config.settings.production \
              -e DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
              "$IMAGE_NAME" python manage.py migrate

            echo "--- Collecting static files ---"
            docker run --rm \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e DJANGO_SETTINGS_MODULE=config.settings.production \
              -e DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
              -e DJANGO_AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
              -e DJANGO_AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -e DJANGO_AWS_STORAGE_BUCKET_NAME="${{ vars.DJANGO_AWS_STORAGE_BUCKET_NAME }}" \
              -v static_volume:/app/staticfiles \
              "$IMAGE_NAME" python manage.py collectstatic --noinput

            echo "--- Starting containers ---"
            export DJANGO_IMAGE="$IMAGE_NAME"
            export DATABASE_URL="${{ secrets.DATABASE_URL }}"
            export DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}"
            export DJANGO_ADMIN_URL="${{ secrets.DJANGO_ADMIN_URL }}"
            export DJANGO_ALLOWED_HOSTS="${{ vars.DJANGO_ALLOWED_HOSTS }}"
            export EMAIL_HOST="${{ vars.EMAIL_HOST }}"
            export EMAIL_PORT="${{ vars.EMAIL_PORT }}"
            export EMAIL_HOST_USER="${{ vars.EMAIL_HOST_USER }}"
            export EMAIL_HOST_PASSWORD="${{ secrets.EMAIL_HOST_PASSWORD }}"
            export EMAIL_USE_TLS="${{ vars.EMAIL_USE_TLS }}"
            export DJANGO_AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
            export DJANGO_AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            export DJANGO_AWS_STORAGE_BUCKET_NAME="${{ vars.DJANGO_AWS_STORAGE_BUCKET_NAME }}"
            export AWS_DEFAULT_REGION="${{ vars.AWS_REGION }}"
            docker-compose -f docker-compose.production.yml up -d

            echo "--- Cleanup old images ---"
            docker image prune -f

            echo "--- Deployment completed successfully ---"
